@using Shine.Components.Common

@inherits ListItemsContainer

<CascadingValue Value="@this">
    <div id="@_id" class="@CssClasses" style="@CssStyles">
        @if (ShowIndicators)
        {
            <div class="carousel-indicators">
                @for (int childIndex = 0; childIndex < Children.Count; childIndex++)
                {
                    <button type="button" data-bs-target="@CarouselId" data-bs-slide-to="@childIndex"></button>
                }
            </div>
        }
        <div class="carousel-inner">
            @ChildContent
        </div>
        @if (ShowButtons)
        {
            <button class="carousel-control-prev" type="button" data-bs-target="@CarouselId" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="@CarouselId" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        }
    </div>
</CascadingValue>

@code{
    private Guid _id = Guid.NewGuid();

    /// <summary>
    /// The child content.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Show Next and Previous buttons. Default: true.
    /// </summary>
    [Parameter]
    public bool ShowButtons { get; set; } = true;

    /// <summary>
    /// Show indicators buttons. Default: true.
    /// </summary>
    [Parameter]
    public bool ShowIndicators { get; set; } = true;

    /// <inheritdoc/>
    protected override string ComponentName => "carousel slide";

    /// <summary>
    /// The carousel id.
    /// </summary>

    private string CarouselId => "#" + _id;
}