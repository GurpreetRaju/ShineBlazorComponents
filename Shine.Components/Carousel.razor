@using Shine.Components.Common

@inherits ListItemsContainer

<CascadingValue Value="@this">
    <div class="@CssClasses" style="@CssStyles">
        @ChildContent

        <div class="w3-center w3-display-bottommiddle" style="width:100%">
            @foreach (var child in Children)
            {
                <span class="@GetBadgeClass(child)" @onclick="() => ShowCarouselItem(child)"></span>
            }
        </div>
    </div>
</CascadingValue>

@code{
    private int m_currentVisibleItemIndex;
    private Timer m_automaticSlidertimer;

    /// <summary>
    /// The child content.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Interval (in sec) for automatic slide change.
    /// </summary>
    [Parameter]
    public int Interval { get; set; }

    /// <inheritdoc/>
    protected override string CssClasses => JoinClasses("w3-content w3-display-container", base.CssClasses);

    /// <inheritdoc/>
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender && Children.Any())
        {
            Children[0].Show();

            if (Interval > 0 && Children.Count > 1)
            {
                m_automaticSlidertimer = new Timer(OnAutomaticSliderTimerElapsed);
                ResetTimer();
            }
        }
    }

    /// <summary>
    /// Gets the badge classes.
    /// </summary>
    protected virtual string GetBadgeClass(IListItem item)
    {
        return JoinClasses("carousel-badge", Children.IndexOf(item) == m_currentVisibleItemIndex ? "active" : string.Empty);
    }

    /// <summary>
    /// Set the selected item as current.
    /// </summary>
    /// <param name="nextVisibleChild">The new item to set visible.</param>
    private void ShowCarouselItem(IListItem nextVisibleChild)
    {
        int nextVisibleItemIndex = Children.IndexOf(nextVisibleChild);

        if (m_currentVisibleItemIndex == nextVisibleItemIndex) return;

        var oldVisibleChild = Children[m_currentVisibleItemIndex];

        nextVisibleChild.Show();
        oldVisibleChild.Hide();

        m_currentVisibleItemIndex = nextVisibleItemIndex;

        ResetTimer();
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Handles event when the <see cref="m_automaticSlidertimer"/> is elapsed.
    /// </summary>
    private void OnAutomaticSliderTimerElapsed(object state)
    {
        var nextSlideIndex = m_currentVisibleItemIndex + 1;
        if (nextSlideIndex >= Children.Count)
        {
            nextSlideIndex = 0;
        }

        var oldVisibleChild = Children[m_currentVisibleItemIndex];
        var nextVisibleChild = Children[nextSlideIndex];

        nextVisibleChild.Show();
        oldVisibleChild.Hide();

        m_currentVisibleItemIndex = nextSlideIndex;

        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Reset the timer.
    /// </summary>
    protected void ResetTimer()
    {
        m_automaticSlidertimer?.Change(Interval * 1000, Interval * 1000);
    }
}