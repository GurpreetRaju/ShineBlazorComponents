@inherits BackgroundComponentBase

<Button Clicked="Show" Class="@TriggerClass">@TriggerText</Button>

@if (_show)
{
    <div id="@Id" class="@CssClasses" style="@CssStyles" @attributes="AdditionalAttributes">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    @if (string.IsNullOrEmpty(HeaderText))
                    {
                        @Header
                    }
                    else
                    {
                        <h2 class="modal-title">@HeaderText</h2>
                    }
                    <Button @onclick="Hide" Variant="ButtonVariant.Link" aria-label="Close" Class="btn-close align-self-end"></Button>
                </div>
                <div class="modal-body">
                    @Body
                </div>
                @if (Footer != null)
                {
                    <div class="modal-footer">
                        @Footer
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {

    private readonly Guid Id = Guid.NewGuid();
    private bool _show = false;

    /// <summary>
    /// Trigger text.
    /// </summary>
    [Parameter]
    public string TriggerText { get; set; }

    /// <summary>
    /// Trigger class.
    /// </summary>
    [Parameter]
    public string TriggerClass { get; set; }

    /// <summary>
    /// Header text.
    /// </summary>
    [Parameter]
    public string HeaderText { get; set; }

    /// <summary>
    /// Header.
    /// </summary>
    [Parameter]
    public RenderFragment Header { get; set; }

    /// <summary>
    /// Child content.
    /// </summary>
    [Parameter]
    public RenderFragment Body { get; set; }

    /// <summary>
    /// Child content.
    /// </summary>
    [Parameter]
    public RenderFragment Footer { get; set; }

    /// <inheritdoc/>
    protected override string ComponentName => "modal";

    /// <summary>
    /// Css builder.
    /// </summary>
    protected override CssClassBuilder CssBuilder => base.CssBuilder.WithClass("fade").WithClass("show", _show);

    /// <summary>
    /// Show the modal.
    /// </summary>
    protected async Task Show()
    {
        _show = true;

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Hide the modal.
    /// </summary>
    protected async Task Hide()
    {
        _show = false;

        await InvokeAsync(StateHasChanged);
    }
}