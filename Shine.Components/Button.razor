
@inherits ShineComponentBase

<button type="@ButtonType.ToString().ToLower()"
        class="@CssClasses"
        style="@CssStyles"
        @onclick="Clicked"
        @attributes="AdditionalAttributes"
        disabled="@Disabled">
    @ChildContent
</button>


@code {

    /// <summary>
    /// The child content.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Whether the button is disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// The button size.
    /// </summary>
    [Parameter]
    public Size Size { get; set; } = Size.Medium;

    /// <summary>
    /// The button _type.
    /// </summary>
    [Parameter]
    public ButtonType ButtonType { get; set; }

    /// <summary>
    /// The button variant.
    /// </summary>
    [Parameter]
    public ButtonVariant Variant { get; set; }

    /// <summary>
    /// The outline.
    /// </summary>
    [Parameter]
    public bool Outline { get; set; }

    /// <summary>
    /// Event callback to invoke on clicked.
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> Clicked { get; set; }

    /// <inheritdoc/>
    protected override string ComponentName => "btn";

    /// <inheritdoc/>
    protected override CssClassBuilder CssBuilder => base.CssBuilder
        .WithClass(GetButtonVariantClass())
        .WithClass(GetButtonSizeClass());

    /// <summary>
    /// Gets the button size class.
    /// </summary>
    /// <returns></returns>
    protected string GetButtonSizeClass()
    {
        return Size switch
        {
            Size.Small => "btn-sm",
            Size.Large => "btn-lg",
            _ => null
        };
    }

    /// <summary>
    /// Gets the button variant class.
    /// </summary>
    /// <returns></returns>
    protected string GetButtonVariantClass()
    {
        if (Variant == ButtonVariant.None) return string.Empty;

        string variantClass = "btn-";
        if (Outline && Variant != ButtonVariant.Link)
            variantClass += "outline-";

        return variantClass += Variant.ToString().ToLowerInvariant();
    }
}

