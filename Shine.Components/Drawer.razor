@using Shine.Components.Enumerations
@inherits BackgroundComponentBase

<div class="@CssClasses" style="@CssStyles" @attributes="AdditionalAttributes">
    <div class="drawer-trigger">
        <Button ButtonType="ButtonType.Button" Variant="ButtonVariant.Link" Clicked="ToggleCollapse">
            @if (ShowRightArrow)
            {
                <i class="bi bi-arrow-right"></i>
            }
            else
            {
                <i class="bi bi-arrow-left"></i>
            }
        </Button>
    </div>
    <div class="drawer-content">
        @ChildContent
    </div>
    <div class="drawer-collapsed-content">
        @CollapsedContent
    </div>
</div>

@code {

    /// <summary>
    /// Parent container.
    /// </summary>
    [CascadingParameter]
    public DrawerContainer Parent { get; set; }

    /// <summary>
    /// The drawer content.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// The drawer collapsed content.
    /// </summary>
    [Parameter]
    public RenderFragment CollapsedContent { get; set; }

    /// <summary>
    /// Whether the drawer is collapsed.
    /// </summary>
    [Parameter]
    public bool Collapsed { get; set; }

    /// <summary>
    /// Event callback when <see cref="Collapsed"/> changes.
    /// </summary>
    [Parameter]
    public EventCallback<bool> CollapsedChanged { get; set; }

    /// <summary>
    /// Drawer width when collapsed. Default: 4.5rem.
    /// </summary>
    [Parameter]
    public string CollapsedWidth { get; set; } = "4.5rem";

    /// <summary>
    /// Drawer width when expanded. Default: 16rem.
    /// </summary>
    [Parameter]
    public string Width { get; set; } = "16rem";

    /// <summary>
    /// Whether to drop shadow. Default: true.
    /// </summary>
    [Parameter]
    public bool HasShadow { get; set; } = true;

    /// <summary>
    /// The drawer position in <see cref="DrawerContainer"/>
    /// </summary>
    [Parameter]
    public DrawerPosition Position { get; set; }

    /// <inheritdoc/>
    protected override string ComponentName => "drawer";

    /// <inheritdoc/>
    protected override CssClassBuilder CssBuilder => base.CssBuilder
        .WithClass("drawer-collapse", Collapsed)
        .WithClass("shadow", HasShadow)
        .WithClass(Position.ToString().ToLowerInvariant());

    /// <inheritdoc/>
    protected override CssStyleBuilder StyleBuilder => base.StyleBuilder
        .AddStyle("width", CollapsedWidth, Width, Collapsed);

    /// <summary>
    /// Whether to show the right arrow.
    /// </summary>
    protected bool ShowRightArrow => (Collapsed && Position == DrawerPosition.Left) 
        || (!Collapsed && Position == DrawerPosition.Right);

    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        NotifyStateChanged();
    }

    /// <summary>
    /// Toggle the collapsed state.
    /// </summary>
    private void ToggleCollapse()
    {
        Collapsed = !Collapsed;
        CollapsedChanged.InvokeAsync(Collapsed);

        NotifyStateChanged();

        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Notify state changed.
    /// </summary>
    protected void NotifyStateChanged()
    {
        Parent?.DrawerStateChanged(this, Collapsed ? CollapsedWidth : Width);
    }
}
